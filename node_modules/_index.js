dat = null;
delete dat;
var
    express = require('express'),
    app = express(),
    fs = require('fs'),
    Inflator    = require('./Inflator.js'),
    express = require('express'),
    dat = fs.readFileSync('./Songs/Intro.json'),
    songData = JSON.parse(dat),
    Song = require('./Song.js'),
    _ = require('underscore'),
    bb = require('backbone');
    utilExt = require('./codelibs/utilsExtension.js');

_._ = utilExt;

app.values = {
    forEachModulators: JSON.parse(fs.readFileSync('./values/ForEachModulators.json').toString())
};

GLOBAL._ = _;
GLOBAL.app = app;

var PhaseElevator = require('./Manipulators/PhaseElevator.js');



app.set('port', (process.env.PORT || 5000));
app.use(express.static(__dirname + '/public'));

app.set('views', __dirname + '/views');
app.set('view engine', 'ejs');

app.get('/', function(request, response) {
  response.render('pages/index')
});

app.get('/firstsong', function(request, response) {

    var jsonSong = JSON.stringify(firstSong.play({'tonal':tonal, 'parser': parser}));
    response.write(jsonSong);
    response.send();
});

app.get('/songSystem', function(request, response) {


    song = null;
    delete song;
    var song = null,
        song = Inflator.inflate(JSON.parse(dat)),
        phsElvtr = new PhaseElevator();

    phsElvtr.go(song.portal('verse', function(br){console.log(br)}, {}));



    var bars = null,
        bars = song.readBars();
                cosole.log('bars as fetched:---');
                console.log(JSON.stringify(bars));
        var
        wrBars = song.getSheetMusicBars(),
        songData = {
            'song': bars,
            'writeableSong': wrBars //a simply structured array of notes;
                                    //goes to
        };

    app.jsonSong = JSON.stringify(songData);
    response.write(app.jsonSong);
    response.send();
});

app.get('/play2', function(req, res, next) {
    res.render('pages/music/music');
});

app.listen(app.get('port'), function() {
    console.log('Node app is running on port', app.get('port'));
});
