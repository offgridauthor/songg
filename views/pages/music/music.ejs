<!DOCTYPE html>
<html>
<head>
  <% var dir = '/libs/'; %>
  <title>developer backend for songg </title>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <script src="<%=dir;%>Tone.js" type="text/javascript"></script>
  <script src="<%=dir;%>soundfont-player.min.js" type="text/javascript"></script>
  <script
    src="https://code.jquery.com/jquery-2.2.4.js"
    integrity="sha256-iT6Q9iMJYuQiMWNd9lDyBUStIq/8PuOW33aOqmvFpqI="
    crossorigin="anonymous"></script>
</head>
<script>
// This is just a page for developers to make sure that the
// sound is playing correctly in the browser for quick demo purposes.
//
// No strong organization here yet;  we're still deciding on
// what architecture will best serve the interface.
// The end-user interface will be much more significant and useful than this,
// probably using React JS or Vue or Angular.
//
// Un-remark 'sf' for soundfont (https://github.com/danigb/soundfont-player)
// Instead, un-remark 'wa' for a webaudio instrument (https://tonejs.github.io/)
//
// Safari and FireFox do better sometimes than Chrome with the Tonejs system.
// Both do very well, always, with the soundfont system.
//
// Note: "stop" is not yet enabled for the synthesizer (soundfont-free) version
// simply becaues implementation is more involved. Button gets purposefully
// disabled with tone.js in this codebase for now.

window.instrumentation = 'sf';
// window.instrumentation = 'wa'; //disables "stop" button
let params = {};
/**
 * Main function; play demo song and write a link to download .midi file.
 */
window.onload = () => {

    fetchParams();
    let dataUrl = 'songSystem';
    if (params['fileName']) {
      dataUrl += ('?fileName='+ params['fileName']);
    }

    jQuery.get(
        dataUrl,
        function(dat) {

            const parsed = JSON.parse(dat),
              link = parsed.midiLink,
              songFiles = parsed.files;

            midiDownloadLink(link);
            otherSongs(songFiles);

            playNotes(parsed.song);
        }
    );
};

/**
 * Write to page the songlink for downloading the song.
 *
 */
function midiDownloadLink (linkTxt) {
  link(linkTxt, 'dl-link');
}

function link (linkDisplayText, targetContainer, href = null) {

  const linkElement =
    '<div>'
      + '<a href="' + (href || linkDisplayText) + '">'
      + linkDisplayText
      + '</a>'
      + '</div>';

  $('.' + targetContainer).append(linkElement);
}

function otherSongs (songNames) {
  let base = location.protocol + '//' + location.host + location.pathname;

  songNames.forEach((sn) => {
    let linkHref = base + '?fileName=' + sn,
        linkTxt = sn.split('.json')[0];

    link(linkTxt, 'other-songs', linkHref);

  });
}

/**
 * Play notes in one of two ways according to
 * global var window.instrumentation.
 */
function playNotes(notes) {
  let $stopper =
    $('.stop-button');

  writeNotes(notes);

  if (instrumentation === 'sf') {
    initiateAndStartPlayerInterface(notes, $stopper);

  } else if (instrumentation === 'wa') {
      $stopper.attr('disabled', 'disabled');
      playNotesWithTonalSynth(notes);
  }
}

/**
 * Initiate the player interface; soundfont has been chosen, so
 * activate the stop button and play the notes.
 */
function initiateAndStartPlayerInterface (notes, $stopper) {

  // It takes time to get the instrument
  // set up; use propise for loading-of-
  // files-type wait time. Do this async.
  let prom = getInstrumentPromise();
  // With the instru ready go, we can...
  prom.then((instrumentation) => {
    // link it to the stop button
    activateStopper($stopper, instrumentation.instrument);
    // and use it to play notes
    playNotesWithInstrument(instrumentation.instrument, notes, instrumentation.ac);
  });
}

/**
 * Having obtained the instrument (soundfont) and Audio Context,
 * use those to play the notes.
 */
function playNotesWithInstrument (instr, nts, ac) {
    nts.forEach((nt, idx) => {
      instr.schedule(ac.currentTime + nt[2], [{ note: nt[0], duration: nt[1] }]);
    });
}

/**
 * Get a promise whose callback will have available a soundfont-based
 * instrument.
 */
function getInstrumentPromise () {
  let dfd = $.Deferred();
  const ac = new AudioContext();
  Soundfont.instrument(ac, 'acoustic_grand_piano')
    .then((piano) => {
      dfd.resolve(
        {instrument: piano, ac: ac}
      );
    });
  return dfd.promise();
}

/**
 * Hook up the instrument-stopper (for soundfont only) to the button.
 *
 */
function activateStopper ($stopper, instr) {
  $stopper.on('click', (ev) => {
    instr.stop();
  });
}


// Synthesizer method functions - - - - - - - - - - - - -


/**
 * Get a synthesizer (https://tonejs.github.io/)
 * Several synth settings are provided for experimentation.
 * (I've found "saw" and "triangle" to be the most stable.
 * Results vary between browsers. )
 */
function getSynth () {
  const synthesizers = {
    saw: {
        oscillator : {
        	type : 'fmsquare',
          modulationType : 'sawtooth',
          modulationIndex : 3,
          harmonicity: 3.4
        },
        envelope : {
        	attack : 0.001,
          decay : 0.1,
          sustain: 0.1,
          release: 0.1
        }
    },
    pulse: {
      oscillator : {
        type : "pulse",
        modulationFrequency : 1
      },
      envelope : {
        attack : 0.02,
        decay : 0.0,
        sustain : 0.4,
        release : 1.5,
      }
    },
    triangle: {
      oscillator  : {
        type  : 'triangle'
      },
        envelope  : {
        attack  : 0.005 ,
        decay  : 0.1 ,
        sustain  : 0.3 ,
        release  : 1
      }
    }
  },
  synth =
    new Tone.Synth(synthesizers.pulse)
    .toMaster();

  return synth;
}

/**
 * Fetch synth and play the notes
 */
function playNotesWithTonalSynth (notes) {
  const synth = getSynth();
  notes.forEach(
      function(itm, idx) {
        playNoteWebAudio(itm, synth);
      }
  );
}

/**
 *  Play single note
 */
function playNoteWebAudio (nt, synth) {
  synth.triggerAttackRelease(...nt);
}

// Note-writing methods - - - - -- - - - - - - - - - - -



/**
 * Show in document each note that is about to be played.
 */
function writeNotes(notes) {
  notes.forEach(writeTextNode);
}
/**
 * Write a single note. (Notice a "note-list" ul element is required to
 * be on the page preloaded.)
 */
function writeTextNode(itm) {
  var node = document.createElement("li"),
      textnode = document.createTextNode(itm);

  node.appendChild(textnode);
  document.getElementById("note-list").appendChild(node);
}


// Sorry.....
function fetchParams() {
  window.location.search
    .replace(/[?&]+([^=&]+)=([^&]*)/gi, function(str,key,value) {
      params[key] = value;
    }
  );
}
</script>
<body>
<div class="container">
    <span><i><b>This is a dev-only stub for establishing a browser-based demo player for the song to be downloaded.</b></i></span>
    <div class="music">
      <br><br><br>
      <div class="other-songs"></div>
      <br><br><br><br><br><br><br><br>
      <div class="dl-link"></div>
      <div>Playing demo. . . </div>
      <button class="stop-button"> stop </button>
    </div>
    <ul id="note-list"></ul>
</div>
</body>
</html>
