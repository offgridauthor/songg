<!DOCTYPE html>
<html>
<head>
  <% var dir = ''; %>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<script src="<%=dir;%>/music-libs/Base64.js" type="text/javascript"></script>
	<script src="<%=dir;%>/music-libs/Base64binary.js" type="text/javascript"></script>
	<script src="<%=dir;%>/music-libs/WebAudioAPI.js" type="text/javascript"></script>
	<script src="<%=dir;%>/music-libs/audioDetect.js" type="text/javascript"></script>
	<script src="<%=dir;%>/music-libs/gm.js" type="text/javascript"></script>
	<script src="<%=dir;%>/music-libs/loader.js" type="text/javascript"></script>
	<script src="<%=dir;%>/music-libs/plugin.audiotag.js" type="text/javascript"></script>
	<script src="<%=dir;%>/music-libs/plugin.webaudio.js" type="text/javascript"></script>
	<script src="<%=dir;%>/music-libs/plugin.webmidi.js" type="text/javascript"></script>
	<script src="<%=dir;%>/music-libs/dom_request_xhr.js" type="text/javascript"></script>
	<script src="<%=dir;%>/music-libs/dom_request_script.js" type="text/javascript"></script>
	<script src="<%=dir;%>/music-libs/midi-export.js" type="text/javascript"></script>
  <script src="<%=dir;%>/libs/jquery-built.js"></script>
</head>
<script>
// Band-aid line to see which version of the song
// the user (always me, David, at this point) wants
// to retreive.
var whichSong = window.location.href.indexOf('play2') == -1 ? 'firstsong' : 'songSystem',
    sngCntr = 0;

window.onload = function () {
    //Initialize the MIDI playing capability to give a rough idea
    //of the song as manipulated by server-side scripts.
	MIDI.loadPlugin(
    {
        /**
         * Format of the specified soundfont voice
         * @type {String}
         */
        audioFormat: 'mp3',
        /**
         * URL for soundfont voices
         * @type {String}
         */
		soundfontUrl: "./soundfont/",
        /**
         * Name of soundfont voice to use
         * @type {String}
         */
		instrument: "acoustic_grand_piano",
        /**
         * Function to trigger on progression of song
         *
         * @param  {object} state    State info
         * @param  {string} progress Progress info
         *
         * @return {undefined}
         */
		onprogress: function(state, progress) {
            console.log('progress');
		},
        /**
         * Function to run after MIDI player plugin is loaded.
         *
         * @return {undefined}
         */
		onsuccess: function() {
            //Fetch scripted song data from the server
            $.get(
                whichSong,
                playSong
            );

            /**
             * Play the song using MIDI player
             *
             * @param  {string} data JSON string of song data
             *
             * @return {undefined}
             */
            function playSong(data)
            {
                var parsed = '',
                    parsed = JSON.parse(data),
                    chords = parsed.song;

                chords.forEach(
                    playChord
                );

                //Trigger a download of the file to the client
                //write(parsed.writeableSong);

            }

            /**
             * Use MIDI player to play a small array of notes
             *
             * @param  {array} crd  Small array of notes
             *
             * @return {undefined}
             */
            function playChord (crd)
            {
                var isFrst = 1;
                $.each(crd.chord, playNote);
            }
            /**
             * Use MIDI player to play a single note.
             *
             * @param  {} dl [description]
             * @param  {[type]} nt [description]
             * @return {[type]}    [description]
             */
            function playNote(dl, nt)
            {
                var note = nt.note.midi,    // the MIDI note
                    delay = nt.note.time,   // midi delay
                    vol = 127,
                    velocity = 127;         // how hard the note hits (required; todo: move to server)

                // play the note
                MIDI.setVolume(0, vol);
                MIDI.noteOn(0, note, velocity, delay);
                MIDI.noteOff(0, note, delay);
            }
	    }
    });

    /**
     * Stop all notes playing on the MIDI player
     *
     * @param  {[type]} ev [description]
     * @return {[type]}    [description]
     */
    var stopPlay = function(ev)
    {
        MIDI.stopAllNotes();

    }

    $('body').find('.stop-button')
    .on('click', stopPlay);
};
/**
 * Create a string of binary data that will be a
 * download-ready MIDI file
 *
 * @param  {array}      sng Writeable-notation musical notes array
 *
 * @return {undefined}      Function triggers download in client
 */
var write = function(sng)
{
    var noteEventsFile = [];
    sng.forEach(function(noteObj) {

        var pushEvts = [];
        noteEventsFile.push(
            MidiEvent.noteOn(noteTable[noteObj.note])
        );
        noteEventsFile.push(
            MidiEvent.noteOff(noteTable[noteObj.note], noteObj.duration)
        );
    });

    var writeTrack = new MidiTrack({ events: noteEventsFile  }),
        writeSong  = MidiWriter({ tracks: [writeTrack] });

    writeSong.save();
}

</script>
<body>
<div class="container">
    <div class="music">
      Playing script-manipulated song
      <button class="stop-button"></button>
    </div>
</div>
</body>
</html>
